from functools 	import cached_property
from typing 	import Self
from os 		import getenv
import logging

from django.utils.safestring 	import mark_safe
from django.core.exceptions 	import ValidationError
from django.core.cache 			import cache
from django.urls 				import resolve, reverse, NoReverseMatch
from django.db 					import models

from tinymce.models import HTMLField
import requests

from shared.models.validators 	import *
from shared.models.managers 	import IndividualizedBulkOperationsManager
from shared.telegram.params 	import MessageParseMode
from shared.reflection 			import typename
from core.models.bases 			import BaseRenderableModel
# from core.views.bases 		import GenericPageView (circular import, locally imported in Page.clean())
from core.constants 			import RENDERING_SUPPORTS_TEXT
from core.config 				import TELEGRAM_SENDING, GENERIC_TEMPLATE

_logger = logging.getLogger(__name__)

class Page(BaseRenderableModel):
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)
		self.extra_context_manager: models.Manager['ExtraContext']

	order = models.PositiveSmallIntegerField(default=0)
	content = HTMLField('–ö–æ–Ω—Ç–µ–Ω—Ç', blank = True, help_text = RENDERING_SUPPORTS_TEXT)
	is_generic_page = models.BooleanField('–≠—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏-–¥–æ–±–∞–≤–ª—è–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞?', default = False,
		help_text = mark_safe(
			'‚úÖ: –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ url <code>"/<slug>/"</code>, —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ '
			'<code>Template name</code>. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω—É–∂–µ–Ω —Å–≤–æ–π View.<br>'
			'‚ùå: –í—ã–±–∏—Ä–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π View.<br>'
			'<br>'
			'–í–ª–∏—è–µ—Ç –Ω–∞ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –ø–æ–ª–µ–π <code>URL Pathname</code> –∏ <code>Template name</code>.'))

	url_name = models.CharField("URL Name", max_length = 64, blank = True,
		help_text = mark_safe(
			'<code>is_generic_page:</code>‚úÖ - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ—Ç–æ–º—É <b>–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> –ø—É—Å—Ç—ã–º.'
			'<br>'
			'<code>is_generic_page:</code>‚ùå - <code>name</code> —Ç–æ–≥–æ url, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
			'<details style="padding-left: 1rem;">'
				'–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –≤–∞—à–∏—Ö <code>urlpatterns</code> –µ—Å—Ç—å <code>path("fun-path/", some_view, '
				'name="your-name")</code>, —Ç—É—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ <code>"your-name"</code>.<br>'
				'–í—ã –≤—Å—ë –∫–æ—Ä—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏, –º–µ—Ç–æ–¥ <code>get_absolute_url()</code> –≤–µ—Ä–Ω—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç '
				'path, —Ç.–µ <code>"/fun-path/"</code>.<br>'
				'<br>'
				'–î–ª—è index —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏ "/", –∞ —Ç–∞–∫–∂–µ –¥–ª—è generic —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º '
				'URL –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ, —É–≤—ã, –Ω–æ –≤—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ url –∏ view, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∞–º –Ω–µ '
				'–Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞.' # –í –ø—Ä–æ—á–µ–º, –∫–∞–∫-–±—É–¥—Ç–æ –±—ã –∫–æ–º—É-—Ç–æ –Ω–µ –ø–æ—Ñ–∏–≥, —Ä–∞–Ω—å—à–µ
				# –≤—Å–µ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–ª–∏ View-—ã –ø–æ–¥ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			'</details>'))

	template_name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ django-—Ç–µ–º–ø–ª–µ–π—Ç–∞',
		# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
		validators = [template_exists_in_root_directory],
		blank = True,
		# Ps: DetailView –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ –∏–∑ –ø–æ–ª—è –º–æ–¥–µ–ª–∏, –Ω–æ —è –Ω–µ —Ö–æ—á—É,
		# —á—Ç–æ–±—ã –±—ã–ª–æ 2 —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ –∑–∞–¥–∞—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç - —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –∏ –≤ –∫–ª–∞—Å—Å–µ View,
		# —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—è, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ View.
		help_text = mark_safe(
			'<code>is_generic_page:</code>‚úÖ - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. '
			f'–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <code>{GENERIC_TEMPLATE.PAGE}</code><br>'
			'<code>is_generic_page:</code>‚ùå - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ—Ç–æ–º—É <b>–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> –ø—É—Å—Ç—ã–º.'))

	class Meta:
		verbose_name = '—Å—Ç—Ä–∞–Ω–∏—Ü–∞'
		verbose_name_plural = '—Å—Ç—Ä–∞–Ω–∏—Ü—ã'
		ordering = ['order']

	def clean(self):
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ template_name
		if not self.is_generic_page and self.template_name:
			raise ValidationError({
				'template_name': '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ is_generic_page:‚ùå, —Ç–∞–∫ –∫–∞–∫ '
				'–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—Å—Ç—Ä–æ–≥–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —è–≤–Ω–æ—Å—Ç–∏).'
			})

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ url_source
		if self.is_generic_page and self.url_name:
			raise ValidationError({
				'url_name': '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ is_generic_page:‚ùå, —Ç–∞–∫ –∫–∞–∫ '
				'–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—Å—Ç—Ä–æ–≥–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —è–≤–Ω–æ—Å—Ç–∏).'
			})

		if not self.is_generic_page:
			try: self.get_absolute_url()
			except NoReverseMatch: raise ValidationError({
				'url_name': 'path —Å —Ç–∞–∫–∏–º name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
			})

	def get_absolute_url(self):
		if self.is_generic_page:
			# –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
			return f'/{self.slug}/'

		return reverse(self.url_name)

	# –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä–µ–∫—Ç Page –∂–∏–≤—ë—Ç —Ç–æ–ª—å–∫–æ 1 –∑–∞–ø—Ä–æ—Å,
	# –Ω–æ –≤–Ω—É—Ç—Ä–∏ –º–æ–≥—É—Ç –º–Ω–æ–≥–æ —Ä–∞–∑ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —Å–≤-–≤—É
	@cached_property
	def extra_context(self) -> dict:
		"""–î–ª—è —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤"""
		return {ctx.key: ctx.value for ctx in self.extra_context_manager.all()}


class ExtraContext(models.Model):
	key = models.CharField('–ö–ª—é—á', max_length = 64)
	value = models.CharField('–ó–Ω–∞—á–µ–Ω–∏–µ')
	page = models.ForeignKey(Page, models.CASCADE, blank = True, null = True,
		related_name = 'extra_context_manager',
		verbose_name = '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
		help_text = mark_safe(
			'–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –∑–¥–µ—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—É - –∫–ª—é—á –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã '
			'–∏ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (<code>global.extra_context</code>).<br>'
			'–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –æ–Ω –≤—Å—ë —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ, –Ω–æ —É–∂–µ —á–µ—Ä–µ–∑ <code>global.pages</code>'))

	class Meta:
		verbose_name = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç'
		verbose_name_plural = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç'

	def __str__(self):
		if self.page is None:
			return f'global {self.key}'
		else:
			return f'{self.key} for page "{self.page}"'


class TelegramSendingChannel(models.Model):
	class Specialization(models.TextChoices):
		NEW_REQUEST_NOTIFICATIONS = (
			'new_request_notifications', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö')
		LOGS = ('logs', '–õ–æ–≥–∏')
		# –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ç

	token_env_name = models.CharField('ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–æ–∫–µ–Ω–æ–º', validators = [env_variable_name],
		help_text = '–ù–∞–∑–≤–∞–Ω–∏–µ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–æ–∫–µ–Ω–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞. '
		'–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–∏—Å—Ç–µ–º–µ.')
	chat_id = models.CharField('ID —á–∞—Ç–∞', max_length = 32,
		help_text = '–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞ - –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ '
		'–ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!')
	specialization = models.CharField('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞', choices = Specialization.choices,
		unique = True, help_text = "–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

	# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ bulk –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–º–∞—é—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ.
	# –ö–æ–Ω–µ—á–Ω–æ, –≤—Ä—è–¥–ª–∏ –∫—Ç–æ-—Ç–æ –≤ –∫–æ–¥–µ —Ç—É—Ç –∏—Ö –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å, –Ω–æ –≤ django –µ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	# –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Ö –Ω–µ—è–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å.
	objects = IndividualizedBulkOperationsManager()

	class Meta:
		verbose_name = '–ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram'
		verbose_name_plural = 'üì° | –ö–∞–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram'

	def __str__(self):
		return self.get_specialization_display()

	# –°–º–µ–Ω–∏–ª –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å dict & lock –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë —Ç–∞–∫–∂–µ –≤ –ø—è–º—è—Ç–∏
	@classmethod
	def _get_cache_key(cls, specialization: Specialization):
		return f"{typename(cls)}_for_{specialization}"

	@classmethod
	def _invalidate_cache(cls, specialization: Specialization):
		cache_key = cls._get_cache_key(specialization)
		cache.delete(cache_key)
		_logger.debug(f'–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä {typename(cls)} –¥–ª—è {specialization} –±—ã–ª –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω')

	def _to_cache_instance(self):
		cache_key = self._get_cache_key(self.specialization)
		cache.set(cache_key, self, timeout = None)
		_logger.debug(f'–≠–∫–∑–µ–º–ø–ª—è—Ä {typename(self)} –¥–ª—è {self.specialization} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–µ—à')


	@classmethod
	def get_by_specialization(cls, specialization: Specialization) -> Self | None:
		"""–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
		cache_key = cls._get_cache_key(specialization)
		instance = cache.get(cache_key)

		if instance:
			_logger.debug(f'–≠–∫–∑–µ–º–ø–ª—è—Ä {typename(cls)} –¥–ª—è {specialization} –±—ã–ª –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –Ω–µ–≥–æ')
			return instance

		_logger.debug(f'–≠–∫–∑–µ–º–ø–ª—è—Ä–∞ {typename(cls)} –¥–ª—è {specialization} –Ω–µ—Ç –≤ –∫–µ—à–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î')
		try:
			instance = cls.objects.get(specialization = specialization)
			instance._to_cache_instance()

		except cls.DoesNotExist:
			_logger.debug(f'–ó–∞–ø–∏—Å–∏ {typename(cls)} —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π {specialization} –Ω–µ—Ç –≤ –ë–î')

		return instance

	def save(self, *args, **kwargs):
		if self.pk:
			old_specialization = type(self).objects.get(pk = self.pk).specialization

			if self.specialization != old_specialization:
				self._invalidate_cache(old_specialization)
			else:
				self._invalidate_cache(self.specialization)

		return super().save(*args, **kwargs)

	def delete(self, *args, **kwargs):
		self._invalidate_cache(self.specialization)
		return super().delete(*args, **kwargs)


	@property
	def _token(self):
		return getenv(self.token_env_name, '')

	# –ù–µ –∫–µ—à–∏—Ä—É–µ—Ç—Å—è —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏)
	@property
	def token_env_set(self):
		"""–í–µ—Ä–Ω—ë—Ç `False`, –µ—Å–ª–∏ env-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞."""
		return bool(self._token.strip())

	def _raise_if_token_not_set(self):
		if not self.token_env_set:
			raise RuntimeError(
				f'Token ENV variable with name {self.token_env_name}'
				' is not setted (not exsist or empty).'
			)

	# –ï—Å–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏–¥–µ—é, —Ç–æ –º–æ–∂–Ω–æ –≤ shared —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å TelegramAPI,
	# –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –≤—Å–µ –º–µ—Ç–æ–¥—ã telegram API
	# –•–æ—Ç—è, –≤—Ä–æ–¥–µ –µ—Å—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Å —á–∏—Å—Ç—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è API
	def _get_api_url(self, action: str):
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é url-—Å—Ç—Ä–æ–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º.
		Raises:
			RuntimeError: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
		"""
		self._raise_if_token_not_set()
		return f"https://api.telegram.org/bot{self._token}/{action}"

	def clean(self):
		if not self.token_env_set:
			raise ValidationError(
				'ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ .env-—Ñ–∞–π–ª, –ø–æ—Ç–æ–º —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–¥–µ—Å—å. '
				'–ï—Å–ª–∏ –≤—ã –µ—ë —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ .env, —Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.'
			)


	def send_message(
			self, text: str, *,
			parse_mode: MessageParseMode = MessageParseMode.HTML,
			timeout: float = TELEGRAM_SENDING.DEFAULT_SEND_MESSAGE_TIMEOUT):
		# –ú–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è ASGI + async
		"""
		**–í–ù–ò–ú–ê–ù–ò–ï!!!** –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!

		Raises:
			RuntimeError: –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
			HTTPError: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º (raise_for_status())
			RequestException: –í–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
		"""
		url = self._get_api_url('sendMessage')
		payload = {
			'text': text,
			'chat_id': self.chat_id,
			'parse_mode': parse_mode.value # –ú–æ–∂–Ω–æ –±–µ–∑ .value (StrEnum), –Ω–æ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–µ–π
		}

		response = requests.post(url, json = payload, timeout = timeout)
		response.raise_for_status()

	def try_send_message(
			self, text: str, *,
			parse_mode: MessageParseMode = MessageParseMode.HTML,
			**kwargs # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
		) -> tuple[bool, Exception | None]:
		# –ú–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è ASGI + async
		"""
		**–í–ù–ò–ú–ê–ù–ò–ï!!!** –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.<br>
		–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ `send_message()`, kwargs —Ç–æ–∂–µ.
		"""

		# –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º response —Ç.–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–Ω –±—É–¥–µ—Ç –≤ ex (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Ç—å—é),
		# –∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –æ–Ω –Ω–∞–º –∏ –Ω–µ –Ω—É–∂–µ–Ω
		try:
			self.send_message(text = text, parse_mode = parse_mode, **kwargs)
			return (True, None)
		except Exception as ex:
			return (False, ex)

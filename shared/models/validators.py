from typing import Any
import re

from django.utils.deconstruct 	import deconstructible
from django.core.exceptions 	import ValidationError
from django.template.loader 	import get_template
from django.template			import TemplateDoesNotExist


__all__ = (
	'BaseValidator', # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
	'StringStartswith',
	'StringEndswith',
	'FullmatchRegexValidator',
	'string_is_numeric',
	'template_with_this_name_exists',
	'env_variable_name',
)

# –°–Ω–∞—á–∞–ª–∞, –≤—Å—ë –±—ã–ª–æ –Ω–∞ –∫–ª–∞—Å—Å–∞—Ö
# –ü–æ—Ç–æ–º –æ–∫–∞–∑–∞–ª–æ—Å—å —á—Ç–æ –∫–ª–∞—Å—Å—ã (–æ–±—ã—á–Ω—ã–µ) –Ω–µ–ª—å–∑—è - –ø–µ—Ä–µ–≤—ë–ª –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
# –ü–æ—Ç–æ–º –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–ª—å–∑—è
# –í–æ—Ç —Ç–∞–∫ –∏ –ø–æ—è–≤–∏–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–¥–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å—ã —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @deconstructible
# (–∫–æ—Ç–æ—Ä—ã–π —è –¥–æ–±–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –º–µ—Ç–∞–∫–ª–∞—Å—Å —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ –≤—Ä—É—á–Ω—É—é –∫–∞–∂–¥—ã–π —Ä–∞–∑)
# –ò –≤–æ–æ–±—â–µ –≤—Å—è –≤–æ—Ç —ç—Ç–∞ –ø–∞—Ä–∞—à–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (_raise_if_not_str, _string_fullmatch_regex)
# UPD: –∫–æ—Ç–æ—Ä—ã–µ —è —É–∂–µ —É–±—Ä–∞–ª, –Ω–æ —ç—Ö–æ –æ—Å—Ç–∞–ª–æ—Å—å
# UPD 2: –Ω–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å–æ —Å–ª–æ–∂–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–∂–µ –Ω—É–∂–Ω—ã,
# –∞ –∏—Å—Ö–æ–¥–Ω—ã–µ (_raise_if_not_str, _string_fullmatch_regex) —è —É–¥–∞–ª–∏–ª –∏ —Å–æ–∑–¥–∞–ª –≤–º–µ—Å—Ç–æ –Ω–∏—Ö –∫–ª–∞—Å—Å—ã
# –ø–æ—ç—Ç–æ–º—É —Ç–µ–ø–µ—Ä—å –≤ –Ω–∏—Ö –º—ã —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å—ã üíÄ (—Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç)
# PS: –≠—Ç–æ —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ "–ü–æ—á–µ–º—É —Ç–∞–∫".

class DeconstructibleMeta(type):
	"""–ú–µ—Ç–∞–∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç @deconstructible."""
	def __new__(cls, name, bases, attrs):
		new_class = super().__new__(cls, name, bases, attrs)
		return deconstructible(new_class) # –î–µ–∫–æ—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å

class BaseValidator(metaclass=DeconstructibleMeta):
	"""–í—Å–µ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ @deconstructible."""
	error_msg = "–û—à–∏–±–∫–∞!"

	def __init__(self, *, invert: bool = False, **initkwargs):
		self.invert = invert

		for attr_name, value in initkwargs.items():
			if not hasattr(self, attr_name):
				raise AttributeError(f'–£ –∫–ª–∞—Å—Å–∞ {self.__class__.__name__} –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ {attr_name}!')
			setattr(self, attr_name, value)

	def _value_is_valid(self, value: Any) -> bool:
		return True

	def check_is_valid(self, value: Any) -> bool:
		is_valid = self._value_is_valid(value)
		if self.invert:
			is_valid = not is_valid
		return is_valid

	def build_error_msg(self, value: Any) -> Any:
		return self.error_msg

	def __call__(self, value: Any):
		if not self.check_is_valid(value):
			raise ValidationError(
				self.build_error_msg(value)
			)

class TargetValueTypeMixin:
	# –í—ã–±—Ä–∞–ª –±—ã set, –Ω–æ isinstance —Ä–∞–±–æ—Ç–∞–µ—Ç —Å tuple
	allowed_value_types: tuple[type, ...] = ()

	def __call__(self, value):
		if not self.allowed_value_types:
			raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")

		if not isinstance(value, self.allowed_value_types):
			allowed_types = self.allowed_value_types
			actual_type = type(value)
			msg = None
			if len(allowed_types) == 1:
				expected = allowed_types[0].__name__
				msg = f"Expected {expected}, got {actual_type}"
			else:
				expected = ", ".join(t.__name__ for t in allowed_types)
				msg = f"Expected one of: {expected}, got {actual_type}"

			raise TypeError(msg)

		_super = super()
		if hasattr(_super, '__call__'):
			_super.__call__(value)


class BaseStringValidator(TargetValueTypeMixin, BaseValidator):
	allowed_value_types = (str, )

	def __init__(self, check_string: str, *, invert = False, **initkwargs):
		super().__init__(invert=invert, **initkwargs)
		self.check_string = check_string

	# –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏                 vvv
	def _value_is_valid(self, value: str):
		return super()._value_is_valid(value)

class StringEndswith(BaseStringValidator):
	def build_error_msg(self, value):
		return f'–°—Ç—Ä–æ–∫–∞ {"–Ω–µ" if self.invert else ""} –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "{self.check_string}"!'

	def _value_is_valid(self, value):
		return value.endswith(self.check_string)

class StringStartswith(BaseStringValidator):
	def build_error_msg(self, value):
		return f'–°—Ç—Ä–æ–∫–∞ {"–Ω–µ" if self.invert else ""} –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ "{self.check_string}"!'

	def _value_is_valid(self, value):
		return value.startswith(self.check_string)

# –ü–æ –∏—Ç–æ–≥—É –≤—Å—ë –≤–µ—Ä–Ω—É–ª–æ—Å—å –∫ –∏—Å—Ç–æ–∫–∞–º, –Ω–æ —É–∂–µ –≤ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º –≤–∏–¥–µ
class FullmatchRegexValidator(TargetValueTypeMixin, BaseValidator):
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É regex"""
	allowed_value_types = (str, )
	check_regex: str = r'[\s\S]*' # –ß—Ç–æ —É–≥–æ–¥–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	error_msg = f"–°—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç r'^{check_regex}$'"

	def __init__(self, check_regex, *, invert=False, **initkwargs):
		super().__init__(invert=invert, **initkwargs)
		self.check_regex = check_regex

	def _value_is_valid(self, value):
		return re.fullmatch(f"^{self.check_regex}$", value) is not None


# MARK: –í –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–π
# (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
def _raise_if_not_str(value):
	# –ö–∞–∫–æ–µ-—Ç–æ "—Å–ø–æ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", —Å–∫–∞–∂–µ–º —Ç–∞–∫
	# TODO: –°–¥–µ–ª–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤ –∫–ª–∞—Å—Å–µ
	# –≤—ã–∑—ã–≤–∞—Ç—å –µ—ë —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç
	class _check(TargetValueTypeMixin): allowed_value_types = (str, )
	_check()(value)


def string_is_numeric(value: str):
	_raise_if_not_str(value)
	try: int(value)
	except:
		raise ValidationError(
			"–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É"
		)

def template_with_this_name_exists(value: str):
	_raise_if_not_str(value)
	if not value:
		return
	try:
		get_template(value)
	except TemplateDoesNotExist:
		raise ValidationError("–¢–µ–º–ø–ª–µ–π—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

def env_variable_name(value: str):
	FullmatchRegexValidator(
		r'[A-Z_][A-Z0-9_]+',
		error_msg = "–≠—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!"
	)(value)

# –î–µ–ª–∞–ª –ò–ò, —è –Ω–∞ —ç—Ç–æ –ø–æ—á—Ç–∏ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤—Ä–µ–º–µ–Ω–∏
def map_coordinates_format(value: str):
	_raise_if_not_str(value)
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	pattern = r'^-?\d+\.\d+,\s-?\d+\.\d+$'

	FullmatchRegexValidator(
		check_regex = pattern,
		error_msg = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "—á–∏—Å–ª–æ.–¥—Ä–æ–±–Ω–∞—è_—á–∞—Å—Ç—å, —á–∏—Å–ª–æ.–¥—Ä–æ–±–Ω–∞—è_—á–∞—Å—Ç—å"',
	)(value)

	# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	lat_str, lon_str = value.split(', ')
	try:
		lat = float(lat_str)
		lon = float(lon_str)
	except:
		# –•–æ—Ç—è –±–∞–∑–æ–≤—ã–π regex –∏ —Ç–∞–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —á–∏—Å–ª–æ,
		# –Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –æ–Ω –º–æ–∂–µ—Ç –∏ –Ω–µ –ø–æ–∫—Ä—ã—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–µ–π—Å—ã
		raise ValidationError('–®–∏—Ä–æ—Ç–∞ –∏–ª–∏ –¥–æ–ª–≥–æ—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º')

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
	if not (-90 <= lat <= 90):
		raise ValidationError('–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90')

	if not (-180 <= lon <= 180):
		raise ValidationError('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180')

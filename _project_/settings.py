"""
Django settings for _project_ project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
from pathlib import Path
from environ import Env

from shared.logging.config_tools 	import add_global_filter
from shared.console.ansi_codes 		import *
from _project_.constants 			import LEVEL_ONLY_LOGGER

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


Env.read_env(BASE_DIR / '.env')
env = Env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)
def _add_if_debug(obj) -> tuple:
	"""Используйте вместе с оператором распаковки `*`
	Пример:
	```
	PARAMS = [
		'common',
		*_add_if_debug('...')
	]
	```
	"""
	if DEBUG: return (obj,)
	return ()

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
INTERNAL_IPS = ['127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django.contrib.sitemaps',
	'django.contrib.sites',

	# Libs
	'solo',
	'mptt',
	'tinymce',
	'rangefilter',
	'debug_toolbar',
	'django_cleanup',
	'phonenumber_field',

	# This project
	'core',
	'business',
	'feedback_requests',
]

MIDDLEWARE = [
	# Libs (required top position)
	*_add_if_debug('debug_toolbar.middleware.DebugToolbarMiddleware'),

	# Django
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '_project_.urls'

DEBUG_TEMPLATES_MODE_ENABLED = env.bool('DEBUG_TEMPLATES_ENABLED', False)
TEMPLATES_DIR = BASE_DIR / 'templates'
TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': (
			[TEMPLATES_DIR / '_debug']
			if DEBUG_TEMPLATES_MODE_ENABLED else
			[TEMPLATES_DIR]
		),
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',

				# This project
				'core.context_processors.global_context',
				'core.context_processors.debug_context',
			],

			'builtins': [
				'core.templatetags.project_tags'
			],
		},
	},
]

WSGI_APPLICATION = '_project_.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {'default': env.db()}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
	{'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
	{'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
	{'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Samara'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'
IMAGES_ROOT = MEDIA_ROOT / 'images'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
	'default': {
		'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
	}
}

# Logging
LOGS_DIR = BASE_DIR / env.str('LOGS_DIR', 'logs')

if not LOGS_DIR.exists():
	LOGS_DIR.mkdir(parents = True)

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False, # Отключить иные обработчики

	'filters': {
		'tg_token': {
			'()': 'shared.logging.filters.TelegramBotTokenFilter'
		}
	},

	'formatters': {
		'standart': {
			'format': '[{levelname}] {asctime} {name}:{lineno} {funcName}() {message}',
			'style': '{',
			'datefmt': '%Y-%m-%d %H:%M:%S',
		},
		'django-console': {
			'format': '[{levelname}] %s{name}%s: {message}' % (D_GREEN, RESET),
			'style': '{',
		},
		'AMRegistrator': {
			'format': '[{levelname}] %sAMRegistrator%s: {message}' % (CYAN, RESET),
			'style': '{',
		},
		'level-only': {
			'format': '[{levelname}] {message}',
			'style': '{'
		}
	},

	'handlers': {
		'console': {
			'level': 'DEBUG' if DEBUG else 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'standart',
		},
		'file': {
			'level': 'INFO',
			'class': 'logging.FileHandler',
			'formatter': 'standart',
			'filename': LOGS_DIR / f'logs.log'
		},
		'django-console': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
			'formatter': 'django-console',
		},
		'AMRegistrator': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
			'formatter': 'AMRegistrator',
		},
		'console-level-only': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
			'formatter': 'level-only'
		}
	},

	'root': {
		'handlers': ['console', 'file'],
		'level': 'DEBUG' if DEBUG else 'INFO'
	},
	'loggers': {
		'shared.admin.model_registration': {
			'handlers': ['AMRegistrator'],
			'level': 'DEBUG',
			'propagate': False
		},
		'django': {
			'handlers': ['django-console', 'file'],
			'level': 'INFO',
			'propagate': False
		},
		LEVEL_ONLY_LOGGER: {
			'handlers': ['console-level-only'],
			'level': 'DEBUG',
			'propagate': False
		},
		# Чтоб не спамил всякой DEBUG ерундой
		'debug_toolbar.store': {'level': 'INFO',},
	}
}
add_global_filter(LOGGING, 'tg_token')

if not 'runserver' in sys.argv:
	# Чтобы не спамило дебаг логами при миграциях
	LOGGING['root']['level'] = 'INFO'
	LOGGING['loggers'].pop('shared.admin.model_registration')

# Настройка предупреждений
SILENCED_SYSTEM_CHECKS = ['ckeditor.W001']


# MARK: Project
DEFAULT_MODEL_ADMIN_CLASSES = {
	'solo.models.SingletonModel': 'solo.admin.SingletonModelAdmin',
	'mptt.models.MPTTModel': 'mptt.admin.DraggableMPTTAdmin',

	# Project
	'core.models.bases.BaseRenderableModel': 'core.admin.bases.BaseRenderableModelAdmin',
}

# MARK: Libs
SOLO_CACHE = 'default'

PHONENUMBER_DEFAULT_REGION = 'RU'

TINYMCE_DEFAULT_CONFIG = {
	'height': '25vh',
	'width': '75%',
	'plugins':
		'advlist,autolink,lists,link,image,charmap,preview,anchor,'
		'searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,paste,'
		'code,help,wordcount',
	"menubar": "file edit view insert format tools table help",
	'toolbar':
		'undo redo | formatblocks | bold italic underline strikethrough | removeformat | '
		'alignleft aligncenter alignright alignjustify | '
		'bullist numlist | image media template link | table | code | fullscreen | help',
	'table_toolbar':
		'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | '
		'tableinsertcolbefore tableinsertcolafter tabledeletecol',
}
